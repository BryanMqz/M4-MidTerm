// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: test.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CoordinateService_GetCoordinates_FullMethodName = "/multiplied_coordinates.CoordinateService/GetCoordinates"
)

// CoordinateServiceClient is the client API for CoordinateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoordinateServiceClient interface {
	GetCoordinates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Coordinates, error)
}

type coordinateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordinateServiceClient(cc grpc.ClientConnInterface) CoordinateServiceClient {
	return &coordinateServiceClient{cc}
}

func (c *coordinateServiceClient) GetCoordinates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Coordinates, error) {
	out := new(Coordinates)
	err := c.cc.Invoke(ctx, CoordinateService_GetCoordinates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordinateServiceServer is the server API for CoordinateService service.
// All implementations must embed UnimplementedCoordinateServiceServer
// for forward compatibility
type CoordinateServiceServer interface {
	GetCoordinates(context.Context, *Empty) (*Coordinates, error)
	mustEmbedUnimplementedCoordinateServiceServer()
}

// UnimplementedCoordinateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCoordinateServiceServer struct {
}

func (UnimplementedCoordinateServiceServer) GetCoordinates(context.Context, *Empty) (*Coordinates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoordinates not implemented")
}
func (UnimplementedCoordinateServiceServer) mustEmbedUnimplementedCoordinateServiceServer() {}

// UnsafeCoordinateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoordinateServiceServer will
// result in compilation errors.
type UnsafeCoordinateServiceServer interface {
	mustEmbedUnimplementedCoordinateServiceServer()
}

func RegisterCoordinateServiceServer(s grpc.ServiceRegistrar, srv CoordinateServiceServer) {
	s.RegisterService(&CoordinateService_ServiceDesc, srv)
}

func _CoordinateService_GetCoordinates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinateServiceServer).GetCoordinates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoordinateService_GetCoordinates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinateServiceServer).GetCoordinates(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CoordinateService_ServiceDesc is the grpc.ServiceDesc for CoordinateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoordinateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "multiplied_coordinates.CoordinateService",
	HandlerType: (*CoordinateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCoordinates",
			Handler:    _CoordinateService_GetCoordinates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}
